[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'folke/tokyonight.nvim'

[[plugins]]
repo = 'navarasu/onedark.nvim'
hook_add = '''
  let g:onedark_config = {
    \ 'style': 'warmer',
  \}
'''

[[plugins]]
repo = 'kana/vim-submode'

[[plugins]]
repo = 'rhysd/clever-f.vim'
hook_add = '''
  let g:clever_f_ignore_case = 1
  let g:clever_f_smart_case = 1
  let g:clever_f_fix_key_direction = 1
  let g:clever_f_not_overwrites_standard_mappings = 1

  map f <Plug>(clever-f-f)
  map F <Plug>(clever-f-F)
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_do_mapping = 0
  let g:EasyMotion_smartcase = 1
  let g:EasyMotion_keys = ';HKLYUIOPNM,QWERTASDGZXCVBJF'
  let g:EasyMotion_use_upper = 1
  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1
  let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

  " FindMotion
  map <C-s> <Plug>(easymotion-overwin-f2)
  " LineMotion
  map <Space>j <Plug>(easymotion-j)
  map <Space>k <Plug>(easymotion-k)
  nmap <Space>l <Plug>(easymotion-overwin-line)
  " SearchMotion
  nmap <C-w> <Plug>(easymotion-sn)
  xmap <C-w> <Plug>(easymotion-sn)
  " RepeatMotion
  map <Space>. <Plug>(easymotion-repeat)
  map <Space>n <Plug>(easymotion-next)
  map <Space>p <Plug>(easymotion-prev)
'''

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
depends = ['denops.vim']
hook_add = '''
  let g:fuzzy_motion_labels = [
    \ 'J', 'F', 'K', 'D', 'L', 'S', 'A', 'H', 'G',
    \ 'N', 'U', 'V', 'R', 'B', 'Y', 'T', 'M', 'I', 'C',
    \ 'E', 'O', 'X', 'W', 'P', 'Q', 'Z'
    \ ]
  map ;; :<C-u>FuzzyMotion<CR>
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
  let g:tcomment_mapleader1 = '<C-_>'
  let g:tcomment_mapleader2 = '<Leader>'
  let g:tcomment_opleader1 = 'gc'
  let g:tcomment_opleader2 = 'gC'
'''

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'
hook_add = '''
lua << EOF
require'nvim-web-devicons'.setup {
 override = {};
 color_icons = true;
 default = true;
}
EOF
'''

[[plugins]]
repo = 'akinsho/bufferline.nvim'
hook_add = '''
lua << EOF
require("bufferline").setup{}
EOF
'''

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
hook_add = '''
lua << EOF
require('lualine').setup {
  options = {
    icons_enabled = true,
    theme = 'onedark',
    component_separators = { left = '|', right = '|'},
    section_separators = { left = '', right = ''},
    disabled_filetypes = {},
    always_divide_middle = true,
    colored = true,
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch', 'diff'},
    lualine_c = {
      {
        'filename',
        path = 1,
        file_status = true,
        shorting_target = 40,
        symbols = {
          modified = '[+]',
          readonly = '[RO]',
          unnamed = 'Untitled',
        }
      }
    },
    lualine_x = {'filetype', 'encoding'},
    lualine_y = {
      {
        'diagnostics',
        source = {'nvim-lsp'},
      }
    },
    lualine_z = {'location'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'filetype'},
    lualine_y = {'location'},
    lualine_z = {}
  },
  tabline = {},
  winbar = {},
  inactive_winbar = {},
  extensions = {}
}
EOF
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim', 'neoyank.vim', 'vim-devicons']
hook_add = '''
   " Add custom menus
  let s:menus = {}
  let s:menus.file = {'description': 'File search (buffer, file, file_rec, file_mru'}
  let s:menus.line = {'description': 'Line search (change, grep, line, tag'}
  let s:menus.others = {'description': 'Others (command, command_history, help)'}
  let s:menus.file.command_candidates = [
        \ ['buffer', 'Denite buffer'],
        \ ['file: Files in the current directory', 'Denite file'],
        \ ['file_rec: Files, recursive list under the current directory', 'Denite file_rec'],
        \ ['file_mru: Most recently used files', 'Denite file_mru']
        \ ]
  let s:menus.line.command_candidates = [
        \ ['change', 'Denite change'],
        \ ['grep', 'Denite grep'],
        \ ['line', 'Denite line'],
        \ ['tag', 'Denite tag']
        \ ]
  let s:menus.others.command_candidates = [
        \ ['command', 'Denite command'],
        \ ['command_history', 'Denite command_history'],
        \ ['help', 'Denite help']
        \ ]

  call denite#custom#var('menu', 'menus', s:menus)

  nnoremap [denite] <Nop>
  nmap ; [denite]
  nnoremap <silent> [denite]b :<C-u>Denite buffer -smartcase<CR>
  nnoremap <silent> [denite]c :<C-u>Denite change -smartcase<CR>
  nnoremap <silent> [denite]f :<C-u>Denite file -smartcase<CR>
  nnoremap <silent> [denite]g :<C-u>Denite grep<CR>
  nnoremap <silent> [denite]G :<C-u>DeniteCursorWord grep<CR>
  nnoremap <silent> [denite]h :<C-u>Denite command_history -smartcase<CR>
  nnoremap <silent> [denite]H :<C-u>Denite help<CR>
  nnoremap <silent> [denite]l :<C-u>Denite line -smartcase<CR>
  nnoremap <silent> [denite]T :<C-u>Denite tag<CR>
  nnoremap <silent> [denite]u :<C-u>Denite file_mru -smartcase<CR>
  nnoremap <silent> [denite]r :<C-u>Denite file/rec -smartcase<CR>
  nnoremap <silent> [denite]d :<C-u>Denite directory_mru -smartcase<CR>
  nnoremap <silent> [denite]s :<C-u>Denite directory_rec -smartcase<CR>
  nnoremap <silent> [denite]M :<C-u>Denite menu<CR>
  nnoremap <silent> [denite]y :<C-u>Denite neoyank<CR>
  nnoremap <silent> [denite]t :<C-u>Denite tab<CR>
  nnoremap <silent> ,bm :<C-u>Denite -default-action=cd dirmark<CR>
  nnoremap <silent> ,ba :<C-u>Denite dirmark/add<CR>
  " Denite grep検索結果を再表示する
  nnoremap <silent> gr :<C-u>Denite -resume<CR>
  " resumeした検索結果の次の行の結果へ飛ぶ
  nnoremap <silent> gn :<C-u>Denite -resume -cursor-pos=+1 -immediately<CR>
  " resumeした検索結果の前の行の結果へ飛ぶ
  nnoremap <silent> gp :<C-u>Denite -resume -cursor-pos=-1 -immediately<CR>

  call denite#custom#option('default', 'prompt', '>')

  if executable('rg')
    call denite#custom#var('file_rec', 'command',
          \ ['rg', '--files', '--glob', '!.git'])
    " Ripgrep command on grep source
    call denite#custom#var('grep', 'command', ['rg', '--smart-case'])
    call denite#custom#var('grep', 'default_opts',
          \ ['--vimgrep', '--no-heading'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  endif

  " customize ignore globs
  call denite#custom#source('file_rec', 'matchers', ['matcher_fuzzy','matcher_ignore_globs'])
  call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
        \ [
        \ '.git/', 'build/', '__pycache__/',
        \ 'images/', '*.o', '*.make',
        \ '*.min.*',
        \ 'img/', 'fonts/'])

  let s:denite_win_width_percent = 0.8
  let s:denite_win_height_percent = 0.5

  " Change denite default options
  call denite#custom#option('default', {
    \ 'split': 'floating',
    \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
    \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
    \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
    \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
    \ 'source_names': 'short',
    \ 'prompt': '>',
    \ 'highlight_filter_background': 'CursorLine',
    \ 'highlight_matched_char': 'Type',
    \ })

  " Define mappings
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> l
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> <C-s>
    \ denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> <C-v>
    \ denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> <C-t>
    \ denite#do_map('do_action', 'tabopen')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> h
    \ denite#do_map('move_up_path')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> .
    \ denite#do_map('choose_action')
    nnoremap <silent><buffer><expr> <Space><Space>
    \ denite#do_map('toggle_select').'j'
    inoremap <silent><buffer><expr> <C-c>
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-c>
    \ denite#do_map('quit')
  endfunction

  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    " inoremap <silent><buffer><expr> <C-c>
    " \ denite#do_map('quit')
    " nnoremap <silent><buffer><expr> <C-c>
    " \ denite#do_map('quit')
    imap <silent><buffer> <C-c> <Plug>(denite_filter_quit)
    nmap <silent><buffer> <C-c> <Plug>(denite_filter_quit)
  endfunction
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'kristijanhusak/defx-git'

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-icons', 'defx-git']
hook_add = '''
  nnoremap <silent><C-e> :<C-u>Defx -split=vertical -winwidth=40 -direction=topleft -toggle<CR>
  nnoremap <silent><C-a> :<C-u>Defx -resume<CR>

  call defx#custom#option('_', {
      \ 'columns': 'indent:git:icons:filename:mark',
      \ 'show_ignored_files': 0,
      \ 'root_marker': '> ',
      \ 'resume': 1,
      \ })

  let g:defx_icons_enable_syntax_highlight = 1
  let g:defx_icons_column_length = 3

  " update defx status automatically when changing file
  autocmd BufWritePost * call defx#redraw()
  autocmd BufEnter * call defx#redraw()

  autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
      " IndentLinesDisable
      setl nonumber
      " 【Enter】 ツリーを表示/非表示する
      nnoremap <silent><buffer><expr> <CR>
      \ defx#do_action('open_or_close_tree')
      " 【l】 ファイルを開く
      nnoremap <silent><buffer><expr> l
      \ defx#do_action('drop')
      " 【h】 親ディレクトリに移動する
      nnoremap <silent><buffer><expr> h
      \ defx#do_action('cd', ['..'])
      " 【s】 ウィンドウを水平分割してファイルを開く
      nnoremap <silent><buffer><expr> <C-s>
      \ defx#do_action('open', 'split')
      " 【v】 ウィンドウを垂直分割してファイルを開く
      nnoremap <silent><buffer><expr> <C-v>
      \ defx#do_action('open', 'vsplit')
      " 【t】 新規タブでファイルを開く
      nnoremap <silent><buffer><expr> <C-t>
      \ defx#do_action('open', 'tabnew')
      " 【c】 ファイルをコピーする
      nnoremap <silent><buffer><expr> c
      \ defx#do_action('copy')
      " 【m】 ファイルを移動する
      nnoremap <silent><buffer><expr> m
      \ defx#do_action('move')
      " 【p】 ファイルを貼り付ける
      nnoremap <silent><buffer><expr> p
      \ defx#do_action('paste')
      " 【n】 新しいファイルを作成する
      nnoremap <silent><buffer><expr> n
      \ defx#do_action('new_file')
      " 【N】 新しいディレクトリを作成する
      nnoremap <silent><buffer><expr> N
      \ defx#do_action('new_directory')
      " 【d】 ファイルをゴミ箱へ
      " nnoremap <silent><buffer><expr> d
      " \ defx#do_action('remove_trash')
      " 【D】 ファイルを消去
      nnoremap <silent><buffer><expr> D
      \ defx#do_action('remove')
      " 【r】 ファイル名を変更する
      nnoremap <silent><buffer><expr> r
      \ defx#do_action('rename')
      " 【e】 ツリーを開く
      nnoremap <silent><buffer><expr> e
      \ defx#do_action('open_tree')
      " 【E】 ツリーを再帰的に開く
      nnoremap <silent><buffer><expr> E
      \ defx#do_action('open_tree_recursive')
      " 【C】 カラムのトグル
      nnoremap <silent><buffer><expr> C
      \ defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
      " 【x】 ファイルを実行する
      nnoremap <silent><buffer><expr> x
      \ defx#do_action('execute_system')
      " 【yy】 ファイル/ディレクトリのパスをコピーする
      nnoremap <silent><buffer><expr> yy
      \ defx#do_action('yank_path')
      " 【.】 隠しファイルを表示/非表示する
      nnoremap <silent><buffer><expr> .
      \ defx#do_action('toggle_ignored_files')
      " 【~】 ホームディレクトリに移動する
      nnoremap <silent><buffer><expr> ~
      \ defx#do_action('cd')
      " 【ESC】 / 【q】 defx.nvimを終了する
      nnoremap <silent><buffer><expr> <Esc>
      \ defx#do_action('quit')
      nnoremap <silent><buffer><expr> q
      \ defx#do_action('quit')
      " 【j】 カーソルを下に移動する
      nnoremap <silent><buffer><expr> j
      \ line('.') == line('$') ? 'gg' : 'j'
      " 【k】 カーソルを上に移動する
      nnoremap <silent><buffer><expr> k
      \ line('.') == 1 ? 'G' : 'k'
      "  [Space] 選択のトグル
      nnoremap <silent><buffer><expr> <Space><Space>
       \ defx#do_action('toggle_select') . 'j'
      " [*] 全選択
      nnoremap <silent><buffer><expr> <Space>*
      \ defx#do_action('toggle_select_all')
      "  [C-g] フルパスをプリント
      nnoremap <silent><buffer><expr> <C-g>
       \ defx#do_action('print')
      " 【cd】 Neovim上のカレントディレクトリを変更する
      nnoremap <silent><buffer><expr> cd
      \ defx#do_action('change_vim_cwd')
  endfunction

  let g:defx_git#indicators = {
    \ 'Modified'  : '✹',
    \ 'Staged'    : '✚',
    \ 'Untracked' : '✭',
    \ 'Renamed'   : '➜',
    \ 'Unmerged'  : '═',
    \ 'Ignored'   : '☒',
    \ 'Deleted'   : '✖',
    \ 'Unknown'   : '?'
    \ }
  let g:defx_git#column_length = 1
  " hi def link Defx_filename_directory NERDTreeDirSlash
  hi def link Defx_git_Modified Special
  hi def link Defx_git_Staged Function
  hi def link Defx_git_Renamed Title
  hi def link Defx_git_Unmerged Label
  hi def link Defx_git_Untracked Tag
  hi def link Defx_git_Ignored Comment
'''

